import 'dart:async';
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:geocoding/geocoding.dart';

class GoogMapScreen extends StatefulWidget {
  const GoogMapScreen({Key? key});

  @override
  State<GoogMapScreen> createState() => _GoogMapScreenState();
}

class _GoogMapScreenState extends State<GoogMapScreen> {
  late GoogleMapController mapController;
  TextEditingController textEditingController = TextEditingController();
  Completer<GoogleMapController> _controller = Completer();
  static const CameraPosition _kGooglePlex = CameraPosition(
    target: LatLng(28.4212, 70.2989),
    zoom: 14,
  );
  Set<Marker> _markers = {}; // Changed to Set<Marker>

  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  @override
  void initState() {
    _addMarker('Initial Marker', LatLng(28.4212, 70.2989));
  }

  Future<void> _addMarkerFromAddress(String address) async {
    try {
      List<Location> locations = await locationFromAddress(address);
      if (locations.isNotEmpty) {
        final Location location = locations.first;
        final double lat = location.latitude;
        final double lon = location.longitude;

        // Clear existing markers
        _markers.clear();

        // Add a new marker for the entered address
        _addMarker(address, LatLng(lat, lon));

        mapController.animateCamera(CameraUpdate.newLatLng(LatLng(lat, lon)));

            setState(() {});
    } else {
    print('No location found for the provided address.');
    }
    } catch (e) {
    print('Error geocoding address: $e');
    }
  }

  void _addMarker(String markerId, LatLng position) {
    _markers.add(
      Marker(
        markerId: MarkerId(markerId),
        position: position,
        infoWindow: InfoWindow(
          title: markerId, // Display the address as the title
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        appBar: AppBar(
          backgroundColor: Colors.white,
        ),
        body: Column(
          children: [
            Expanded(
              child: GoogleMap(
                initialCameraPosition: _kGooglePlex,
                markers: _markers, // Use _markers directly
                mapType: MapType.normal,
                myLocationEnabled: true,
                compassEnabled: true,
                onMapCreated: (GoogleMapController controller) {
                  mapController = controller;
                  _controller.complete(controller);
                },
              ),
            ),
            Form(
              key: _formKey,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: TextFormField(
                  controller: textEditingController,
                  decoration: const InputDecoration(
                    labelText: 'Enter your Location',
                  ),
                  validator: (value) {
                    if (value!.isEmpty) {
                      return 'Location is required';
                    }
                    return null;
                  },
                ),
              ),
            ),
            ElevatedButton(
              onPressed: () async {
                if (_formKey.currentState!.validate()) {
                  await _addMarkerFromAddress(textEditingController.text);
                }
              },
              child: Text('Add Marker from Address'),
            ),
          ],
        ),
      ),
    );
  }
}

void main() => runApp(MaterialApp(home: GoogMapScreen()));
